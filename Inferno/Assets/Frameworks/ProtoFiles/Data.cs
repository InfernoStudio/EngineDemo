// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Data.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from Data.proto</summary>
public static partial class DataReflection {

  #region Descriptor
  /// <summary>File descriptor for Data.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static DataReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgpEYXRhLnByb3RvIiYKCFByb3BlcnR5EgwKBG5hbWUYASABKAkSDAoEanNv",
          "bhgCIAEoCSInCghDdXJyZW5jeRIMCgR0eXBlGAEgASgJEg0KBXZhbHVlGAIg",
          "ASgFIlYKBUNoZXN0EgoKAmlkGAEgASgJEgwKBG5hbWUYAiABKAkSEwoLZGVz",
          "Y3JpcHRpb24YAyABKAkSDQoFaW1hZ2UYBCABKAkSDwoHcmV3YXJkcxgFIAMo",
          "CSJVCgRDYXJkEgoKAmlkGAEgASgJEh0KCnByb3BlcnRpZXMYAiADKAsyCS5Q",
          "cm9wZXJ0eRINCgVpbWFnZRgDIAEoCRITCgtkZXNjcmlwdGlvbhgEIAEoCSJD",
          "CgZSZXdhcmQSCgoCaWQYASABKAkSEAoIcmV3YXJkSWQYAiABKAkSDAoEdHlw",
          "ZRgDIAEoCRINCgVjb3VudBgEIAEoBSI2CgtHYW1lRWxlbWVudBIKCgJpZBgB",
          "IAEoCRIbCghjdXJyZW5jeRgCIAMoCzIJLkN1cnJlbmN5InIKBERhdGESFgoG",
          "Y2hlc3RzGAEgAygLMgYuQ2hlc3QSFAoFY2FyZHMYAiADKAsyBS5DYXJkEhgK",
          "B3Jld2FyZHMYAyADKAsyBy5SZXdhcmQSIgoMZ2FtZWVsZW1lbnRzGAQgAygL",
          "MgwuR2FtZUVsZW1lbnQiJgoLRGF0YVJlcXVlc3QSFwoPY3VycmVudERhdGFI",
          "YXNoGAEgASgJIjgKDERhdGFSZXNwb25zZRITCgtoYXNobWF0Y2hlZBgBIAEo",
          "CBITCgRkYXRhGAIgASgLMgUuRGF0YWIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Property), global::Property.Parser, new[]{ "Name", "Json" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Currency), global::Currency.Parser, new[]{ "Type", "Value" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Chest), global::Chest.Parser, new[]{ "Id", "Name", "Description", "Image", "Rewards" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Card), global::Card.Parser, new[]{ "Id", "Properties", "Image", "Description" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Reward), global::Reward.Parser, new[]{ "Id", "RewardId", "Type", "Count" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GameElement), global::GameElement.Parser, new[]{ "Id", "Currency" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Data), global::Data.Parser, new[]{ "Chests", "Cards", "Rewards", "Gameelements" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DataRequest), global::DataRequest.Parser, new[]{ "CurrentDataHash" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DataResponse), global::DataResponse.Parser, new[]{ "Hashmatched", "Data" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class Property : pb::IMessage<Property> {
  private static readonly pb::MessageParser<Property> _parser = new pb::MessageParser<Property>(() => new Property());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Property> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Property() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Property(Property other) : this() {
    name_ = other.name_;
    json_ = other.json_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Property Clone() {
    return new Property(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "json" field.</summary>
  public const int JsonFieldNumber = 2;
  private string json_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Json {
    get { return json_; }
    set {
      json_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Property);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Property other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (Json != other.Json) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Json.Length != 0) hash ^= Json.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (Json.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Json);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Json.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Json);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Property other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Json.Length != 0) {
      Json = other.Json;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 18: {
          Json = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class Currency : pb::IMessage<Currency> {
  private static readonly pb::MessageParser<Currency> _parser = new pb::MessageParser<Currency>(() => new Currency());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Currency> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Currency() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Currency(Currency other) : this() {
    type_ = other.type_;
    value_ = other.value_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Currency Clone() {
    return new Currency(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private string type_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Type {
    get { return type_; }
    set {
      type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "value" field.</summary>
  public const int ValueFieldNumber = 2;
  private int value_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Value {
    get { return value_; }
    set {
      value_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Currency);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Currency other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (Value != other.Value) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type.Length != 0) hash ^= Type.GetHashCode();
    if (Value != 0) hash ^= Value.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Type);
    }
    if (Value != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Value);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
    }
    if (Value != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Currency other) {
    if (other == null) {
      return;
    }
    if (other.Type.Length != 0) {
      Type = other.Type;
    }
    if (other.Value != 0) {
      Value = other.Value;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Type = input.ReadString();
          break;
        }
        case 16: {
          Value = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class Chest : pb::IMessage<Chest> {
  private static readonly pb::MessageParser<Chest> _parser = new pb::MessageParser<Chest>(() => new Chest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Chest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Chest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Chest(Chest other) : this() {
    id_ = other.id_;
    name_ = other.name_;
    description_ = other.description_;
    image_ = other.image_;
    rewards_ = other.rewards_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Chest Clone() {
    return new Chest(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "description" field.</summary>
  public const int DescriptionFieldNumber = 3;
  private string description_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Description {
    get { return description_; }
    set {
      description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "image" field.</summary>
  public const int ImageFieldNumber = 4;
  private string image_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Image {
    get { return image_; }
    set {
      image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "rewards" field.</summary>
  public const int RewardsFieldNumber = 5;
  private static readonly pb::FieldCodec<string> _repeated_rewards_codec
      = pb::FieldCodec.ForString(42);
  private readonly pbc::RepeatedField<string> rewards_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> Rewards {
    get { return rewards_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Chest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Chest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Name != other.Name) return false;
    if (Description != other.Description) return false;
    if (Image != other.Image) return false;
    if(!rewards_.Equals(other.rewards_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Description.Length != 0) hash ^= Description.GetHashCode();
    if (Image.Length != 0) hash ^= Image.GetHashCode();
    hash ^= rewards_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (Description.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Description);
    }
    if (Image.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Image);
    }
    rewards_.WriteTo(output, _repeated_rewards_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Description.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
    }
    if (Image.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Image);
    }
    size += rewards_.CalculateSize(_repeated_rewards_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Chest other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Description.Length != 0) {
      Description = other.Description;
    }
    if (other.Image.Length != 0) {
      Image = other.Image;
    }
    rewards_.Add(other.rewards_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Description = input.ReadString();
          break;
        }
        case 34: {
          Image = input.ReadString();
          break;
        }
        case 42: {
          rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class Card : pb::IMessage<Card> {
  private static readonly pb::MessageParser<Card> _parser = new pb::MessageParser<Card>(() => new Card());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Card> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Card() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Card(Card other) : this() {
    id_ = other.id_;
    properties_ = other.properties_.Clone();
    image_ = other.image_;
    description_ = other.description_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Card Clone() {
    return new Card(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "properties" field.</summary>
  public const int PropertiesFieldNumber = 2;
  private static readonly pb::FieldCodec<global::Property> _repeated_properties_codec
      = pb::FieldCodec.ForMessage(18, global::Property.Parser);
  private readonly pbc::RepeatedField<global::Property> properties_ = new pbc::RepeatedField<global::Property>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Property> Properties {
    get { return properties_; }
  }

  /// <summary>Field number for the "image" field.</summary>
  public const int ImageFieldNumber = 3;
  private string image_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Image {
    get { return image_; }
    set {
      image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "description" field.</summary>
  public const int DescriptionFieldNumber = 4;
  private string description_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Description {
    get { return description_; }
    set {
      description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Card);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Card other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if(!properties_.Equals(other.properties_)) return false;
    if (Image != other.Image) return false;
    if (Description != other.Description) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    hash ^= properties_.GetHashCode();
    if (Image.Length != 0) hash ^= Image.GetHashCode();
    if (Description.Length != 0) hash ^= Description.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    properties_.WriteTo(output, _repeated_properties_codec);
    if (Image.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Image);
    }
    if (Description.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Description);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    size += properties_.CalculateSize(_repeated_properties_codec);
    if (Image.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Image);
    }
    if (Description.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Card other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    properties_.Add(other.properties_);
    if (other.Image.Length != 0) {
      Image = other.Image;
    }
    if (other.Description.Length != 0) {
      Description = other.Description;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          properties_.AddEntriesFrom(input, _repeated_properties_codec);
          break;
        }
        case 26: {
          Image = input.ReadString();
          break;
        }
        case 34: {
          Description = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class Reward : pb::IMessage<Reward> {
  private static readonly pb::MessageParser<Reward> _parser = new pb::MessageParser<Reward>(() => new Reward());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Reward> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Reward() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Reward(Reward other) : this() {
    id_ = other.id_;
    rewardId_ = other.rewardId_;
    type_ = other.type_;
    count_ = other.count_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Reward Clone() {
    return new Reward(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "rewardId" field.</summary>
  public const int RewardIdFieldNumber = 2;
  private string rewardId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RewardId {
    get { return rewardId_; }
    set {
      rewardId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 3;
  private string type_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Type {
    get { return type_; }
    set {
      type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "count" field.</summary>
  public const int CountFieldNumber = 4;
  private int count_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Count {
    get { return count_; }
    set {
      count_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Reward);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Reward other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (RewardId != other.RewardId) return false;
    if (Type != other.Type) return false;
    if (Count != other.Count) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (RewardId.Length != 0) hash ^= RewardId.GetHashCode();
    if (Type.Length != 0) hash ^= Type.GetHashCode();
    if (Count != 0) hash ^= Count.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (RewardId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(RewardId);
    }
    if (Type.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Type);
    }
    if (Count != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Count);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (RewardId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RewardId);
    }
    if (Type.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
    }
    if (Count != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Reward other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.RewardId.Length != 0) {
      RewardId = other.RewardId;
    }
    if (other.Type.Length != 0) {
      Type = other.Type;
    }
    if (other.Count != 0) {
      Count = other.Count;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          RewardId = input.ReadString();
          break;
        }
        case 26: {
          Type = input.ReadString();
          break;
        }
        case 32: {
          Count = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class GameElement : pb::IMessage<GameElement> {
  private static readonly pb::MessageParser<GameElement> _parser = new pb::MessageParser<GameElement>(() => new GameElement());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GameElement> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GameElement() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GameElement(GameElement other) : this() {
    id_ = other.id_;
    currency_ = other.currency_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GameElement Clone() {
    return new GameElement(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "currency" field.</summary>
  public const int CurrencyFieldNumber = 2;
  private static readonly pb::FieldCodec<global::Currency> _repeated_currency_codec
      = pb::FieldCodec.ForMessage(18, global::Currency.Parser);
  private readonly pbc::RepeatedField<global::Currency> currency_ = new pbc::RepeatedField<global::Currency>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Currency> Currency {
    get { return currency_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GameElement);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GameElement other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if(!currency_.Equals(other.currency_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    hash ^= currency_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    currency_.WriteTo(output, _repeated_currency_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    size += currency_.CalculateSize(_repeated_currency_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GameElement other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    currency_.Add(other.currency_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          currency_.AddEntriesFrom(input, _repeated_currency_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class Data : pb::IMessage<Data> {
  private static readonly pb::MessageParser<Data> _parser = new pb::MessageParser<Data>(() => new Data());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Data> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Data() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Data(Data other) : this() {
    chests_ = other.chests_.Clone();
    cards_ = other.cards_.Clone();
    rewards_ = other.rewards_.Clone();
    gameelements_ = other.gameelements_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Data Clone() {
    return new Data(this);
  }

  /// <summary>Field number for the "chests" field.</summary>
  public const int ChestsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::Chest> _repeated_chests_codec
      = pb::FieldCodec.ForMessage(10, global::Chest.Parser);
  private readonly pbc::RepeatedField<global::Chest> chests_ = new pbc::RepeatedField<global::Chest>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Chest> Chests {
    get { return chests_; }
  }

  /// <summary>Field number for the "cards" field.</summary>
  public const int CardsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::Card> _repeated_cards_codec
      = pb::FieldCodec.ForMessage(18, global::Card.Parser);
  private readonly pbc::RepeatedField<global::Card> cards_ = new pbc::RepeatedField<global::Card>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Card> Cards {
    get { return cards_; }
  }

  /// <summary>Field number for the "rewards" field.</summary>
  public const int RewardsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::Reward> _repeated_rewards_codec
      = pb::FieldCodec.ForMessage(26, global::Reward.Parser);
  private readonly pbc::RepeatedField<global::Reward> rewards_ = new pbc::RepeatedField<global::Reward>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Reward> Rewards {
    get { return rewards_; }
  }

  /// <summary>Field number for the "gameelements" field.</summary>
  public const int GameelementsFieldNumber = 4;
  private static readonly pb::FieldCodec<global::GameElement> _repeated_gameelements_codec
      = pb::FieldCodec.ForMessage(34, global::GameElement.Parser);
  private readonly pbc::RepeatedField<global::GameElement> gameelements_ = new pbc::RepeatedField<global::GameElement>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::GameElement> Gameelements {
    get { return gameelements_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Data);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Data other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!chests_.Equals(other.chests_)) return false;
    if(!cards_.Equals(other.cards_)) return false;
    if(!rewards_.Equals(other.rewards_)) return false;
    if(!gameelements_.Equals(other.gameelements_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= chests_.GetHashCode();
    hash ^= cards_.GetHashCode();
    hash ^= rewards_.GetHashCode();
    hash ^= gameelements_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    chests_.WriteTo(output, _repeated_chests_codec);
    cards_.WriteTo(output, _repeated_cards_codec);
    rewards_.WriteTo(output, _repeated_rewards_codec);
    gameelements_.WriteTo(output, _repeated_gameelements_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += chests_.CalculateSize(_repeated_chests_codec);
    size += cards_.CalculateSize(_repeated_cards_codec);
    size += rewards_.CalculateSize(_repeated_rewards_codec);
    size += gameelements_.CalculateSize(_repeated_gameelements_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Data other) {
    if (other == null) {
      return;
    }
    chests_.Add(other.chests_);
    cards_.Add(other.cards_);
    rewards_.Add(other.rewards_);
    gameelements_.Add(other.gameelements_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          chests_.AddEntriesFrom(input, _repeated_chests_codec);
          break;
        }
        case 18: {
          cards_.AddEntriesFrom(input, _repeated_cards_codec);
          break;
        }
        case 26: {
          rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
          break;
        }
        case 34: {
          gameelements_.AddEntriesFrom(input, _repeated_gameelements_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class DataRequest : pb::IMessage<DataRequest> {
  private static readonly pb::MessageParser<DataRequest> _parser = new pb::MessageParser<DataRequest>(() => new DataRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DataRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataRequest(DataRequest other) : this() {
    currentDataHash_ = other.currentDataHash_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataRequest Clone() {
    return new DataRequest(this);
  }

  /// <summary>Field number for the "currentDataHash" field.</summary>
  public const int CurrentDataHashFieldNumber = 1;
  private string currentDataHash_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string CurrentDataHash {
    get { return currentDataHash_; }
    set {
      currentDataHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DataRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DataRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CurrentDataHash != other.CurrentDataHash) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CurrentDataHash.Length != 0) hash ^= CurrentDataHash.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CurrentDataHash.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(CurrentDataHash);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CurrentDataHash.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentDataHash);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DataRequest other) {
    if (other == null) {
      return;
    }
    if (other.CurrentDataHash.Length != 0) {
      CurrentDataHash = other.CurrentDataHash;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          CurrentDataHash = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class DataResponse : pb::IMessage<DataResponse> {
  private static readonly pb::MessageParser<DataResponse> _parser = new pb::MessageParser<DataResponse>(() => new DataResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DataResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataResponse(DataResponse other) : this() {
    hashmatched_ = other.hashmatched_;
    data_ = other.data_ != null ? other.data_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataResponse Clone() {
    return new DataResponse(this);
  }

  /// <summary>Field number for the "hashmatched" field.</summary>
  public const int HashmatchedFieldNumber = 1;
  private bool hashmatched_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Hashmatched {
    get { return hashmatched_; }
    set {
      hashmatched_ = value;
    }
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 2;
  private global::Data data_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Data Data {
    get { return data_; }
    set {
      data_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DataResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DataResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Hashmatched != other.Hashmatched) return false;
    if (!object.Equals(Data, other.Data)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Hashmatched != false) hash ^= Hashmatched.GetHashCode();
    if (data_ != null) hash ^= Data.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Hashmatched != false) {
      output.WriteRawTag(8);
      output.WriteBool(Hashmatched);
    }
    if (data_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Data);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Hashmatched != false) {
      size += 1 + 1;
    }
    if (data_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DataResponse other) {
    if (other == null) {
      return;
    }
    if (other.Hashmatched != false) {
      Hashmatched = other.Hashmatched;
    }
    if (other.data_ != null) {
      if (data_ == null) {
        data_ = new global::Data();
      }
      Data.MergeFrom(other.Data);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Hashmatched = input.ReadBool();
          break;
        }
        case 18: {
          if (data_ == null) {
            data_ = new global::Data();
          }
          input.ReadMessage(data_);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
